===================================
  ## Reconnaissance ##
===================================
_mapping out the attack surface_

/check Robots.txt/
>>found in a site's web root. 
>>>>tells well-behaved web crawlers what parts of the site to ignore 

/try Common URLs/
>>>By guessing common page and directory names, you can discover more 
content.
(a tool like dirbuster can help: a file/directory penetration testing tool with a Graphic User Interface (GUI) that is used to brute force directories and file names on web application servers.)

/look for HTML Comments & Hidden elements/ 
>>>Look for forms, form fields, and links that appear in the page source but aren't visible
on the page. 
>>>>The CSS style display: none; hides an element; remove the styling to make it visible again.
>>>>>>Take a look at the HTML comments. 


===================================
  ## System Fingerprinting ##
===================================
_identify what components the system is using_

/questions to ask/ 

- Which web server: Apache, nginx, IIS? 
- Which web framework: .NET, Django, Struts? 
- Which database: MySQL, PostgreSQL, Oracle?
- Version numbers for web server adn other components -> Are they up to date?

/where to look/

HTTP response headers
- Look for Server adn X-Powered-By

Error Messages
- Look for version info and stack traces

Cookies
- Cookie names can reveal framework info. 
>> If they're managing cookies themselves, think about how they're being generated; 
Are they predictable?  
How are they processed on the server? 


=======================================
  ## Open Source Intelligence: OSINT ##
=======================================
_gather info on the public internet_ 

/What to look for/ 
- Known vulnerabilities in frameworks / other components 
- Default credentials 
- Employee contact information / personal information 

/how to find it/ 
- Google error messages, cookie names, version headers, password hashes...
- Read framework / component documentation 
- Read framework / component security advisories 
- Look up company employees on social media 

**Your Google searches aren't private, so when testing applications, don't google 
password hashes or other highly sensitive information - not even in incognito mode**


===================================
  ## Attacks ##
===================================

----Cross-Site Scripting XSS------
_inject malicious JavaScript into a webpage_

XSS allows an attacker to inject client side code (HTML, JavaScript, etc) into the page such
that it's rendered in the victim's browser. 
XSS is possible when user input that hasn't been properly output-encoded is included in a webpage. 

XSS can come in 3 types: 

    (1) REFLECTED
    Script is provided by the caller, included in the response from the server, and executed 
    in the browser. eg, a search term provided in a URL parameter is rendered in the body 
    of the page. 

    (2) PERSISTENT
    Script is stored in a datastore, and included in the body of the page when it's 
    rendered. eg, a forum that allows users to leave comments for one another.

    (3) DOM-based
    Script is included in the page via client-side JavaScript rendering. The malicious
    input is never sent tot he server. eg, an application that updates a user's display
    name client-side based on provided input. (example.com/welcome/#name=Bob)


/what to look for/ 
Data or text you provided is reflected back to you on the page; if that data isn't properly 
encoded, an XSS vulnerability might be present. 
EX: 
    - You search for "foo" in the site's search form, and the result page says
    "your search for 'foo' returned no results" 

    - You navigate to example.com/fakePage adn the 404 says "sorry, page 'fakepage' not found"

    - You try to log in as user "bob" and the following message is returned:
    "the user 'bob' doesn't exist" 


/Test cases ~ Discovery/ 
Once you find where your input is being reflected back to you, try one of these test cases 
to see if it's being properly encoded. 

    <marquee>   
        if not properly encoded, causes content to scroll sideways across the page.

    <plaintext> 
        if not properly encoded, causes browser to display raw HTML 

/Test cases ~ Exploitation/
To score points for XSS, your exploit must open a JavaScript alert box. 


    <script>alert(1)</script>
        the sipmlest possible XSS exploit
    
    <img src="javascript:alert('xss')"/>
        some applications filter <script> tags, and this is one way to bypass it.

    <body onload="alert('xss')"/>
        event handlers like onload are another XSS injection point.


===================================
  ## SQL Injection ##
===================================
_execute arbitrary SQL commands on the server; possible when the server 
concatenates user-supplied data with SQL code_

/what to look for/
Look for places where the application could be querying a SQL database.
If a page isn't completely static, it's probably retrieving information from a database.

Think about what SQL code the application might be running; ie, when a user logs in,
the query might look like:

    SELECT * FROM Users 
    WHERE Username= '[user input]'
    AND password = '[user input]';


/Special characters/

'       A single quote delimits strings in SQL queries; becaues most user input is 
        wrapped in strings, this is usually your first step to breaking out of the 
        string adn changing the rest of the query.

#
--      Comment signs which tell the SQL interpreter to ignore the rest of the line.

;       A semicolon ends a SQL comment, which can be used to string multiple commands
        together if the database supports it.

OR
AND     SQL supports boolean operators.

<
=       SQL supports comparison operators; note that comparison uses = , not ==



/Test Cases/


'           A single quote is the simplest discovery test case.
            if this throws a SQL error, it's a sure sign you've found SQL injection.

\'          Another discovery test case, some databases escape special characters 
            with backslashes adn if the application escapes unsafe characters,
            this could bypass it.

' OR 1=1#   Inserted into a WHERE clause, this forces it to evaulate to true,
            and is good for bypassing authentication on login forms.


------Forceful Browsing------

Pages may just be hidden from users, not protected with proper access control checks.
    Forceful Browsing may just mean browsing directly to an administrative page, 
    or you might need to combine it with parameter tampering to view pages that you 
    shouldn't normally have access to.

/what to look for/
Keep an eye on the URL. As an admin or other privileged user, try browsing to as 
many authenticated pages as possible, copying each URL to be used later.

/Test Cases/
Try to access each authenticated page (including any URL parameters) as an unauthenticated 
or lower-privileged user. 
    If a page contains information that only one user should be able to access, logout,
    login as another user, and try to browse the page again.


------Parameter Tampering------

It's possible to change any form or URL parameter; sometimes, changing a value (like
a user ID) can allow you to see or tamper wtih data without authorization.

/what to look for/
All parameters sent to the server:
- URL parameters
- Checkboxes
- Dropdowns
- Hidden Form Fields
- Radio Buttons
- Cookies


/Test Cases/
To tamper with a URL parameter, edit it in your address bar and hit ENTER.
To tamper with a Form Parameter, edit it using your browser's developer tools, then
submit the form.


------File Upload------
Many ways to abuse insecure file uploads exist.
    An attacker can upload code, then look for ways to execute it on the server.
    They can overwrite other files on the server. 
    They could upload malicious scripts or malware that would execute when other users
    view them.


/what to look for/
Any file upload functionality.

/Test Cases/
TAmper with file names, paths and extensions.
Can you upload a file type that isn't permitted? 
Can you upload code, and can you run it?



===================================
  ## Input Validation ##
===================================


>Ideally, a developer should use existing API for their language; for example,
(Java): Rather than use Runtime.exe to issue a 'mail' command, use the available 
Java API located at javax.mail*
    If no such available API exists, the developer should scrub all input for
    malicious characters. 
    Implementing a positive security model would be most efficient. 
    Typically, it's easier to define the legal characters than the illegal.

Input validation itself referes to the process of validating all the input 
to an application before using it. It's absolutely critical to application security,
and most app risks involve tainted input at some level. 
    Many applications dont' plan input validation, and leave it up to the 
    individual developers -- a recipe for disaster, as different developers 
    will inevitably choose a different approach, and many will simply
    leave it out in pursuit of more interesting development. 


------Cache Poisoning------

The impact of a maliciously constructed response can be magnified if it's cached, 
either by a web cache used by multiple users, or even the browser cache of a 
single user.
    If a response is cached in a shared web cache, such as those commonly 
    found in proxy servers, then all users of that cache will continue to 
    receive the malicious content until the cache entry is purged.

    Similarly, if the response is cached in the browser of an individual,
    then that user will continue to receive the malicious content until the
    cache entry is purged (although only the user of the local browser 
    instance will be affected)

To successfully carry out such an attack, an attacker: 

    - Finds the vulnerable service code, which allows them to fill the 
    HTTP header field with many headers.

    - Forces the cache server to flush its actual cache content, which we 
    want to be cached by the servers.

    - Sends a specially crafted request, which will be stored in the cache.

    - Sends the next request: The previously injected content stored in 
    cache will be the response to this request. 

This attack is rather difficult to carry out in a real environment; the list
of conditions is long and hard to accomplish by the attacker. 
However, it's easier to use this technique than Cross-user Defacement. 

A cache poisoning attack is possible because of HTTP Response Splitting and 
flaws in the web application. It's crucial from the attacker's point of view 
that the app allows for filling the header field with more than one header using
CR ( Carriage Return ) and LF ( Line Feed ) characters.

/Examples/
Say there's a webpage which gets its service name from the "page" argument,
and then redirects (302) to this service.
        http://testsite.com/redir.php?page=http://other.testsite.com/

And exemplary code of the redir.php: 
        rezoes@dojo ~/public_html $ cat redir.php
        <?php
        header ("Location: . $_GET['page]);
        ?>

Crafting appropriate request: [1]

1- remove page from the cache 

GET http://testsite.com/index.html HTTP/1.1 
Pragma: no-cache
Host: testsite.com
User-Agent: Mozilla/4.7 [en] (WinNT; I)
Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/png, */*
Accept-Encoding: gzip
Accept-Language: en
Accept-Charset: iso-8859-1,*,utf-8


HTTP header fields "Pragma: no-cache" or "Cache-Control: no-cache" will remove the page from cache (if the page is stored in cache, obviously)

2- using HTTP Response Splitting we force cache server to generate two responses to one request 


GET http://testsite.com/redir.php?site=%0d%0aContent-
Length:%200%0d%0a%0d%0aHTTP/1.1%20200%20OK%0d%0aLast-
Modified:%20Mon,%2027%20Oct%202009%2014:50:18%20GMT%0d%0aConte
nt-Length:%2020%0d%0aContent-
Type:%20text/html%0d%0a%0d%0a<html>deface!</html> HTTP/1.1
Host: testsite.com
User-Agent: Mozilla/4.7 [en] (WinNT; I)
Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg,
image/png, */*
Accept-Encoding: gzip
Accept-Language: en
Accept-Charset: iso-8859-1,*,utf-8


Where we are intentionally setting the future time (in the header it's set to 27 October 2009) in the second header "Last-Modified" to store the response in the cache.
We may get this effect by setting the following headers:
	Last-Modified (checked by the If-Modified-Since header)

	ETag (checked by the If-None_Match header)

3- Sending request for the page, which we want to replace in the cache of the server.

GET http://testsite.com/index.html HTTP/1.1
Host: testsite.com
User-Agent: Mozilla/4.7 [en] (WinNT; I)
Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg,
image/png, */*
Accept-Encoding: gzip
Accept-Language: en
Accept-Charset: iso-8859-1,*,utf-8



------Cross-User Defacement------

An attacker makes a single request to a server that will cause the 
server to create two responses - the second of which may be misinterpreted
as a response to a different request (possibly one made by another user sharing the 
same TCP connection with the server).

Accomplished by:
1. Convincing the user to submit the malicious request themselves
2. Or, remotely in situations where the attacker and user share a common
    TCP connection to the server (ie, shared proxy server)

Can be leveraged (best-case scenario) to convince users the app itself was hacked,
causing loss of confidence; worst-case, attacker can mimic behavior of the app
but redirect private information such as account numbers and passwords.

*This attack type is possible because of HTTP Response Splitting, and flaws in the 
web application. 
    **Difficult to carry out IRL because of specific requirements for the attacker:
        - Applciation must allow for filling the header field with more 
            than one header using CR (Carriage Return) and LF (Line Feed) characters.


------HTTP Response Splitting------

HTTP response splitting occurs when: 
    - Data enters a web application through an untrusted source, most frequently 
        an HTTP request. 
    - The data is included in an HTTP response header, sent to a web user, without
        being validated for malicious characters.

This attack is a means to an end, not an end itself.
An attacker passes malicious data to a vulnerable application, and the app includes
the data in an HTTP response header. 

    To mount a successful exploit, the application must allow input that contains
    CR ( Carriage Return, also given by %0d or \r ) and LF ( Line Feed, also 
    given by %0a or \n ) characters into the header, AND the underlying platform
    must be vulnerable to the injection of such characters.

    These characters not only give attackers control of the remaining headers and 
    body of the response the app intends to send, but also allows them to 
    create addtiional responses entirely under their control.

/Examples/
Using Java as an example (all modern Java EE application servers ought to have this
fixed by now, though) the following code segment reads the name of the author of 
a weblog entry, author, from an HTTP request, and sets it in a cookie header of
an HTTP response. 

    String author = request.getParameter(AUTHOR_PARAM); 
    ...
    Cookie cookie = new Cookie("author", author);
        cookie.setMaxAge(cookieExpiration);
        response.addCookie(cookie);

Assuming a string consisting of standard alpha-numeric characters, such
as "jane smith" is submitted in the request, the HTTP response, including this
cookie, might take the following form: 

    HTTP/1.1 200 OK 
    ...
    Set-Cookie: author=Jane Smith
    ...

However!  Because the value of the cookie is formed of unvalidated user input,
the response will only maintain this form i fthe value submitted
for AUTHOR_PARAM doesn't contain any CR and LF characters. 

If an attacker submits a malicious string, such as 
    "Wiley Hacker\r\nContent-Length:999\r\n\r\n..."
Then the HTTP response would be split into an imposter 
response, followed by the original response, which is now ignored:

    HTTP/1.1 200 OK 
    ...
    Set-Cookie: author=Wiley Hacker
    Content-Length: 999

    <html>malicious content...</html> (to 999th character in this example)
    Original content starting with character 1000, which is now ignored by 
    the web browser...


===================================
  ## Command Injection ##
===================================

This is an attack in which the goal is execution of arbitrary commands on
the host operating system via a vulnerable application. 
    Command Injection attacks are possible when an application passes 
    unsafe user supplied data (forms, cookies, HTTP headers, etc)
    to a system shell.

In this attack, the attacker-supplied operating system commands are 
usually executed with the privileges of the vulnerable application. 
    Command Injection attacks are possible largely due to insufficient
    input validation (defined above).

    This is different from code injection (which allows the attacker
    to add his own code that's then executed by the application).
    In command injection, the attacker extends the default 
    functionality of the application, which executes system commands, 
    without the necessity of injecting code. 


/Examples/

[Example 1]
The following code is a wrapper around the UNIX command cat, which 
prints the contents of a file to a standard output.
It's also injectable: 


#include <stdio.h>
#include <unistd.h>

int main(int argc, char **argv) {
    char cat[] = "cat ";
    char *command; 
    size_t commandLength;

    commandLength = strlen(cat) + strlen(argv[1]) + 1;
    command = (char *) malloc(commandLength);
    strncpy(command, cat, commandLength);
    strncat(command, argv[1], (commandLength - strlen(cat)) );

    system(command);
    return (0);
}


used normally, the output would just be the contents of the file requested:

$ ./catWrapper Story.txt
When last we left our heroes...

However, if we add a semicolon and another command to the end of this
line, the command is executed by catWrapper with no complaint; 


$ ./catWrapper "Story.txt; ls"
When last we left our heroes...
Story.txt       doubFree.c      nullpointer.c
unstosig.c      www*            a.out*
format.c        strlen.c        useFree*
catWrapper*     misnull.c       strlength.c     useFree.c
commandinjection.c  nodefault.c trunc.c writeWhatWhere.c


If catWrapper had been set to have a higher privilege level than the
standard user, arbitrary commands could be executed with that higher 
privilege.


[Example 2]

The following simple program accepts a filename as a command line
argument, and displays the contents of the file back to the user. 
    The program is installed setuid root, because it's intended for 
    use as a learning tool to allow system admins in-training to 
    inspect privileged system files without giving them the ability 
    to modify or damage them/the system.


int main(char* argc, char** argv) {
    char cmd[CMD_MAX] = "/usr/bin/cat ";
    strcat(cmd, argv[1]);
    system(cmd);
}


Because the program runs with root privileges, the call to system()
also executes with root privileges. 
    If a user specifies a standard filename, the call works as 
    expected. However, if an attacker passes a string of the form
    ";rm -rf /" then the call to system() fails to execute cat due to 
    a lack of arguments and then plows on to recursively delete the
    contents of the root partition. 


[Example 3]

This code from a privileged program uses the environment variable
$APPHOME to determine the application's installation directory, and 
then executes an initialization script in that directory. 


...
char* home=getenv("APPHOME");
char* cmd=(char*)malloc(strlen(home)+strlen(INITCMD));
if (cmd) {
    strcpy(cmd,home);
    strcat(cmd,INITCMD);
    excel(cmd, NULL);
}
...



Where, as in Example 2, the code here allows an attacker to execute
arbitrary commands with the elevated privilege of the app.
    Here, the attacker can modifiy the environment variable $APPHOME
    to specify a different path containing a malicious version of 
    INITCMD. 
Because the program doesn't validate the value read from the environment,
by controlling the environment variable, the attacker can fool the 
application into running malicious code.

The attacker is using the environment variable to control the command
that the program invokes, so the effect of the environment is 
explicit in this example. 
But what about when the attacker changes the way the command 
is interpreted? 


[Example 4]

This code is from a web-based CGI utility that allows users to chaneg
their passwords; the update process under NIS including running /make/ in 
the /var/yp directory.
    Note that since program updates password records, it has been
    installed stuid root.
The program invokes make as follows: 

    system("cd /var/yp && make &> /dev/null");


Where unlike the previous examples, the command in this is hardcoded
so that an attacker can't control the argument passed to the system().
    HOWEVER -- since the prgram doesn't specify an absolute path
    for make - and doesn't scrub any environment variables prior to 
    invoking the command - the attacker can modify their $PATH variable
    to point to a malicious binary named make, and execute the 
    CGI script from a shell prompt.
        AND ... since the program has been installed setuid root, the
        attacker's version of make now runs with root privileges.

The environment plays a powerful role in the execution of system 
commands within programs.
    Functions like system() and exec() use the environment of the
    program that calls them and therefore attackers have a potential 
    opportunity to influence the bxn of these calls.


    There are many sites that will tell you that Java's Runtime exec
    is exactly the same as C's system function; *That's Not True*.
    And it's not, because both allow you to invoke a new program/
    rocess but C's system function passes its arguments to the shell 
    (/bin/sh) to be parsed, whereas Runtime.exec tries to split the 
    string into an array of words, then executes the first word
    in the array with the rest of the words as parameters.
    Runtime.exec doesn't try to invoke the shell at any point.
        The key difference is that much of the functionality 
        provided by the shell thath could be used for mischief
        ( chaining commands using "&", "&&", "|", "||" )
    etc, redirecting input and output -- this would simply end up 
    as a parameter being apssed to the first command, and likely 
    causing a syntax error, or being thrown out as an invalid 
    parameter.


[Example 5]

The following code snippets are vulnerable to OS command injection
on the Unix/Linux platforms. 


    C:

    #include <stdlib.h>
    #include <stdio.h>
    #include <string.h>

    int main(int argc, char **argv)
    {
        char command [256];

        if(argc != 2) {
            printf("Error: Please enter a program to time!\n");
            return -1;
        }

        memset(&command, 0, sizeof(command));

        strcat(command, "time ./");
        strcat(command, argv[1]);

        system(command);
        return 0;
    }



If this were a suid binary, consider the case when an attacker enters 
the following:



    'ls; cat /etc/shadow'



In the Unix environment, shell commands are separated by a semi-colon;
we can now execute system commmands at will!



[Example 6]

The following PHP code snippet is vulnerable to a command injection 
attack: 



<?php
print("Please specify the name of the file to delete");
print("<p>");
$file=$_GET['filename'];
system("rm $file");
?>



The following request and response is an example of a successful 
attack:

Request

http://127.0.0.1/delete.php?filename=bob.txt;id

Response

Please specify the name of the file to delete 

uid=33(www-data) gid=33(www-data) groups=33(www-data)

Sanitizing Input

Replace or Ban arguments with ";"
Other shell escapes available 
Example:
- &&
- |
- ...
